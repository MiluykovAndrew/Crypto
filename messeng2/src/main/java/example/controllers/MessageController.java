package example.controllers;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import example.client.SendClient;
import example.model.EncryptedMessage;
import example.model.SendKey;
import example.services.EncryptionService;
import example.services.KeyService;
import org.springframework.web.bind.annotation.*;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Random;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
@Slf4j
public class MessageController {

    private final EncryptionService encryptionService;
    private final KeyService keyService;
    private final SendClient sendClien;

    private byte[] aesKey;
    private int caesarKey = 0;
    private BigInteger publicKey;
    private BigInteger privateKey;
    private BigInteger modulus;

    private byte[] peerAesKey;
    private int peerCaesarKey = 0;
    private BigInteger peerPublicKey;
    private BigInteger peerModulus;

    private String lastMessange;
    private String lastMethodForLastMessange;

    @PostMapping("/accept_messange")
    public void acceptMessange(@RequestBody EncryptedMessage encryptedMessage) {
        log.info("üì© –ü—Ä–∏–Ω—è—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", encryptedMessage);
        this.lastMessange = encryptedMessage.getMessage();
        this.lastMethodForLastMessange = encryptedMessage.getMethod();
        log.info("üì• –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏): {}", encryptedMessage.getMessage());
    }

    @PostMapping("/encrypt")
    public String encrypt(@RequestBody EncryptedMessage message) throws Exception {
        log.info("üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {}", message);
        String encrypted;

        switch (message.getMethod().toLowerCase()) {
            case "caesar":
                if (this.peerCaesarKey == 0) {
                    log.warn("‚ùå Caesar –∫–ª—é—á —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    return "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞";
                }
                encrypted = encryptionService.encryptCaesar(message.getMessage(), this.peerCaesarKey);
                break;

            case "aes":
                if (this.peerAesKey == null || this.peerAesKey.length == 0) {
                    log.warn("‚ùå AES –∫–ª—é—á —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    return "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞";
                }
                encrypted = encryptionService.aesEncrypt(message.getMessage(), this.peerAesKey);
                break;

            case "rsa":
                if (this.peerPublicKey == null || this.peerModulus == null) {
                    log.warn("‚ùå RSA –∫–ª—é—á —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    return "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞";
                }
                encrypted = encryptionService.rsaEncrypt(message.getMessage(), this.peerPublicKey, this.peerModulus);
                break;

            default:
                log.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {}", message.getMethod());
                throw new IllegalArgumentException("Invalid method");
        }

        log.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {}", encrypted);
        return encrypted;
    }

    @PostMapping("/decrypt")
    public String decrypt(@RequestBody EncryptedMessage message) throws Exception {
        log.info("üîì –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫—É: {}", message);
        String decrypted;
        switch (message.getMethod().toLowerCase()) {
            case "caesar":
                if (this.caesarKey == 0) {
                    log.warn("‚ùå Caesar –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    return "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞";
                }
                decrypted = encryptionService.decryptCaesar(message.getMessage(), this.caesarKey);
                break;

            case "aes":
                if (this.aesKey == null || this.aesKey.length == 0) {
                    log.warn("‚ùå AES –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    return "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞";
                }
                decrypted = encryptionService.aesDecrypt(message.getMessage(), this.aesKey);
                break;

            case "rsa":
                if (this.privateKey == null || this.modulus == null) {
                    log.warn("‚ùå RSA –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    return "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞";
                }
                decrypted = encryptionService.rsaDecrypt(message.getMessage(), this.privateKey, this.modulus);
                break;

            default:
                log.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏: {}", message.getMethod());
                throw new IllegalArgumentException("Invalid method");
        }
        log.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {}", decrypted);
        return decrypted;
    }

    @PostMapping("/encrypt_and_send")
    public String encryptAndSend(@RequestBody EncryptedMessage message) throws Exception {
        log.info("üì§ –®–∏—Ñ—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", message);
        EncryptedMessage encryptedMessage = new EncryptedMessage();
        encryptedMessage.setMessage(encrypt(message));
        encryptedMessage.setMethod(message.getMethod());
        sendClien.acceptMessange(encryptedMessage);
        log.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {}", encryptedMessage.getMessage());
        return "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –æ–Ω–æ —Ç–∞–∫–æ–µ: " + encryptedMessage.getMessage();
    }

    @PostMapping("/send_encrypted_msg")
    public String sendEncryptedMessage(@RequestBody EncryptedMessage message) {
        log.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", message);
        sendClien.acceptMessange(message);
        return "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ";
    }

    @GetMapping("/get_encrypted_msg")
    public String getEncryptedMessage(
            @RequestParam String method,
            @RequestParam String message
    ) throws Exception {

        EncryptedMessage encryptedMessage = new EncryptedMessage();
        encryptedMessage.setMethod(method);
        encryptedMessage.setMessage(message);

        String decryptedMessage = decrypt(encryptedMessage);
        log.info("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", decryptedMessage);

        return decryptedMessage;
    }

    @GetMapping("/get_encrypted_msg_last_messnge")
    public String getEncryptedLastMessenge() throws Exception {
        if (this.lastMessange == null) {
            log.error("‚ùå –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
            throw new IllegalStateException("No message received.");
        }
        EncryptedMessage encryptedMessage = new EncryptedMessage();
        encryptedMessage.setMessage(this.lastMessange);
        encryptedMessage.setMethod(this.lastMethodForLastMessange);
        log.info("üì• –î–µ—à–∏—Ñ—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", encryptedMessage.getMessage());
        String decrypted = decrypt(encryptedMessage);
        log.info("‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", decrypted);
        return decrypted;
    }



    @PostMapping("/generate")
    public String generateKeys(@RequestParam String method) throws Exception {
        log.info("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞: {}", method);
        switch (method.toLowerCase()) {
            case "aes":
                aesKey = keyService.generateAESKey();
                String base64Key = Base64.getEncoder().encodeToString(aesKey);
                log.info("‚úÖ AES –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {}", base64Key);
                return "AES –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: " + base64Key;

            case "rsa":
                generateRSAKeys();
                return "RSA –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω";

            case "caesar":
                Random random = new Random();
                caesarKey = random.nextInt(100) + 1; // –∫–ª—é—á –Ω–µ 0
                log.info("‚úÖ Caesar –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {}", caesarKey);
                return "Caesar –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: " + caesarKey;

            default:
                log.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {}", method);
                throw new IllegalArgumentException("Invalid method");
        }
    }


    @PostMapping("/send_public_key")
    public void sendPublicKey(@RequestParam String method) {
        log.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: {}", method);
        SendKey encryptedMessage = new SendKey();
        encryptedMessage.setMethod(method);

        switch (method.toLowerCase()) {
            case "rsa":
                encryptedMessage.setA(publicKey);
                encryptedMessage.setM(modulus);
                log.info("üîë –û—Ç–ø—Ä–∞–≤–∫–∞ RSA Public Key: e = {}, n = {}", publicKey.toString(16), modulus.toString(16));
                break;
            case "aes":
                encryptedMessage.setKey(this.aesKey);
                log.info("üîë –û—Ç–ø—Ä–∞–≤–∫–∞ AES –∫–ª—é—á–∞ (Base64): {}", Base64.getEncoder().encodeToString(this.aesKey));
                break;
            case "caesar":
                encryptedMessage.setC(this.caesarKey);
                log.info("üîë –û—Ç–ø—Ä–∞–≤–∫–∞ Caesar –∫–ª—é—á–∞: {}", this.caesarKey);
                break;
            default:
                log.warn("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª—é—á–∞: {}", method);
                return;
        }

        sendClien.getPublicKey(encryptedMessage);
        log.info("‚úÖ –ö–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @PostMapping("/get_public_key")
    public void getPublicKey(@RequestBody SendKey encryptedMessage) {
        log.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: {}", encryptedMessage.getMethod());
        switch (encryptedMessage.getMethod().toLowerCase()) {
            case "rsa":
                this.peerPublicKey = encryptedMessage.getA();
                this.peerModulus = encryptedMessage.getM();
                log.info("üîì –ü–æ–ª—É—á–µ–Ω RSA Public Key —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: e = {}, n = {}", peerPublicKey.toString(16), peerModulus.toString(16));
                break;
            case "aes":
                this.peerAesKey = encryptedMessage.getKey();
                log.info("üîì –ü–æ–ª—É—á–µ–Ω AES –∫–ª—é—á —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (Base64): {}", Base64.getEncoder().encodeToString(peerAesKey));
                break;
            case "caesar":
                this.peerCaesarKey = encryptedMessage.getC();
                log.info("üîì –ü–æ–ª—É—á–µ–Ω Caesar –∫–ª—é—á —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {}", peerCaesarKey);
                break;
            default:
                log.warn("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞: {}", encryptedMessage.getMethod());
        }
    }


    private void generateRSAKeys() {
        log.info("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è RSA –∫–ª—é—á–µ–π...");
        SecureRandom random = new SecureRandom();
        int bitLength = 1024;

        BigInteger p = BigInteger.probablePrime(bitLength / 2, random);
        BigInteger q = BigInteger.probablePrime(bitLength / 2, random);
        modulus = p.multiply(q);
        BigInteger phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));

        do {
            publicKey = new BigInteger(bitLength / 2, random);
        } while (!phi.gcd(publicKey).equals(BigInteger.ONE) || publicKey.compareTo(BigInteger.ONE) <= 0 || publicKey.compareTo(phi) >= 0);

        privateKey = publicKey.modInverse(phi);

        log.info("‚úÖ RSA –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");
        log.info("üîë Public Key (e): {}", publicKey.toString(16));
        log.info("üîê Private Key (d): {}", privateKey.toString(16));
    }
}
